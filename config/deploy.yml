# yaml-language-server: $schema=https://raw.githubusercontent.com/kjellberg/mrsk/validate-with-json-schema/lib/mrsk/configuration/schema.yaml
# Name of your application. Used to uniquely configure containers.
service: wheremylikes

# Name of the container image.
image: wheremylikes

# Deploy to these servers.
servers:
  web:
    hosts:
      - 104.248.132.229
    labels:
      traefik.http.routers.taska.rule: Host(`wheremylikes.com`)
      traefik.http.routers.taska_secure.entrypoints: websecure
      traefik.http.routers.taska_secure.rule: Host(`wheremylikes.com`)
      traefik.http.routers.taska_secure.tls: true
      traefik.http.routers.taska_secure.tls.certresolver: letsencrypt
    options:
      network: "private"

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: cr.yandex/crplr3c4ndmeef487upv
  username: iam
  password: <%= %x(bin/load-token) %>

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  secret:
    - RAILS_MASTER_KEY
    - HOST
    - POSTGRES_DB
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - DATABASE_URL
    - REDIS_URL
    - VK_AUTH_REDIRECT_URL
    - VK_APP_ID

# Use a different ssh user than root
ssh:
  user: deploy

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1
builder:
  multiarch: false
  context: .

# Use accessory services (secrets come from .env).
accessories:
  db:
    image: postgres:16-alpine
    host: 104.248.132.229
    env:
      secret:
        - POSTGRES_DB
        - POSTGRES_USER
        - POSTGRES_PASSWORD
        - DATABASE_URL
    port: 5432
    directories:
      - postgres-data:/var/lib/postgresql/data
    options:
      network: "private"
  redis:
    image: redis:7.2-alpine
    host: 104.248.132.229
    port: 6379
    cmd: "redis-server --appendonly yes --replica-read-only no"
    # volumes:
    #   - redis-data:/data
    directories:
      - redis-data:/data
    options:
      network: "private"

# Configure custom arguments for Traefik. Be sure to reboot traefik when you modify it.
# traefik:
#   args:
#     accesslog: true
#     accesslog.format: json
traefik:
  options:
    network: "private"
    publish:
      - "443:443"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
  args:
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    entryPoints.web.http.redirections.entryPoint.to: websecure # We want to force https
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "oleg@evrone.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json" # Must match the path in `volume`
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web # Must match the role in `servers`
    accesslog: true
    accesslog.format: json

# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# If your app is using the Sprockets gem, ensure it sets `config.assets.manifest`.
# See https://github.com/basecamp/kamal/issues/626 for details
#
asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
